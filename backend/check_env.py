#!/usr/bin/env python3
"""
Script para verificar que todas las variables de entorno necesarias est√©n configuradas
"""
import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Variables requeridas
REQUIRED_VARS = {
    'OPENAI_API_KEY': 'API Key de OpenAI (sk-proj-...)',
    'ADMIN_USER': 'Usuario administrador',
    'ADMIN_PASSWORD': 'Contrase√±a administrador',
    'SECRET_KEY': 'Clave secreta para JWT (m√≠nimo 32 caracteres)',
}

# Variables opcionales pero recomendadas
OPTIONAL_VARS = {
    'QDRANT_URL': 'URL de Qdrant Cloud (https://...)',
    'QDRANT_API_KEY': 'API Key de Qdrant Cloud',
    'QDRANT_HOST': 'Host de Qdrant (para Docker)',
    'QDRANT_PORT': 'Puerto de Qdrant (para Docker)',
    'OPENAI_MODEL': 'Modelo de OpenAI a usar',
    'COLLECTION_NAME': 'Nombre de la colecci√≥n en Qdrant',
    'ACCESS_TOKEN_EXPIRE_MINUTES': 'Minutos de expiraci√≥n del token',
}

def check_environment():
    """Verifica las variables de entorno"""
    print("üîç Verificando configuraci√≥n de variables de entorno...\n")
    
    missing_required = []
    warnings = []
    
    # Verificar variables requeridas
    print("‚úÖ Variables Requeridas:")
    for var, description in REQUIRED_VARS.items():
        value = os.getenv(var)
        if not value:
            missing_required.append(var)
            print(f"‚ùå {var}: NO CONFIGURADA - {description}")
        else:
            # Validaciones espec√≠ficas
            if var == 'SECRET_KEY' and len(value) < 32:
                warnings.append(f"‚ö†Ô∏è  SECRET_KEY es muy corta (debe tener al menos 32 caracteres)")
                print(f"‚ö†Ô∏è  {var}: CONFIGURADA pero muy corta - {description}")
            elif var == 'OPENAI_API_KEY' and not value.startswith('sk-'):
                warnings.append(f"‚ö†Ô∏è  OPENAI_API_KEY no parece v√°lida (debe empezar con 'sk-')")
                print(f"‚ö†Ô∏è  {var}: CONFIGURADA pero formato inv√°lido - {description}")
            else:
                print(f"‚úÖ {var}: CONFIGURADA - {description}")
    
    print()
    
    # Verificar variables opcionales
    print("üìã Variables Opcionales:")
    qdrant_config_type = None
    
    for var, description in OPTIONAL_VARS.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: CONFIGURADA - {description}")
            if var == 'QDRANT_URL':
                qdrant_config_type = 'cloud'
            elif var in ['QDRANT_HOST', 'QDRANT_PORT'] and not qdrant_config_type:
                qdrant_config_type = 'docker'
        else:
            print(f"‚ö™ {var}: NO CONFIGURADA - {description}")
    
    print()
    
    # Verificar configuraci√≥n de Qdrant
    print("üóÑÔ∏è  Configuraci√≥n de Qdrant:")
    if qdrant_config_type == 'cloud':
        if os.getenv('QDRANT_API_KEY'):
            print("‚úÖ Configuraci√≥n Qdrant Cloud completa")
        else:
            warnings.append("‚ö†Ô∏è  QDRANT_URL configurada pero falta QDRANT_API_KEY")
            print("‚ö†Ô∏è  QDRANT_URL configurada pero falta QDRANT_API_KEY")
    elif qdrant_config_type == 'docker':
        print("‚úÖ Configuraci√≥n Qdrant Docker local")
    else:
        warnings.append("‚ö†Ô∏è  No hay configuraci√≥n de Qdrant (se usar√° localhost:6333)")
        print("‚ö†Ô∏è  No hay configuraci√≥n de Qdrant (se usar√° localhost:6333)")
    
    print()
    
    # Resumen
    if missing_required:
        print("‚ùå CONFIGURACI√ìN INCOMPLETA")
        print("Variables requeridas faltantes:")
        for var in missing_required:
            print(f"  - {var}")
        print("\nEl sistema NO puede funcionar sin estas variables.")
        return False
    
    if warnings:
        print("‚ö†Ô∏è  CONFIGURACI√ìN CON ADVERTENCIAS")
        for warning in warnings:
            print(f"  {warning}")
        print("\nEl sistema puede funcionar pero se recomienda revisar estas configuraciones.")
    else:
        print("‚úÖ CONFIGURACI√ìN COMPLETA")
        print("Todas las variables est√°n configuradas correctamente.")
    
    return True

if __name__ == "__main__":
    success = check_environment()
    sys.exit(0 if success else 1)